#
# Copyright 2016 Pixar
#
# Licensed under the Apache License, Version 2.0 (the "Apache License")
# with the following modification; you may not use this file except in
# compliance with the Apache License and the following modification to it:
# Section 6. Trademarks. is deleted and replaced with:
#
# 6. Trademarks. This License does not grant permission to use the trade
#    names, trademarks, service marks, or product names of the Licensor
#    and its affiliates, except as required to comply with Section 4(c) of
#    the License and to reproduce the content of the NOTICE file.
#
# You may obtain a copy of the Apache License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the Apache License with the above modification is
# distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied. See the Apache License for the specific
# language governing permissions and limitations under the Apache License.
#

# USD requires several dependencies that are available via
# apt-get if using the trusty build environment.
language: cpp

branches:
  only:
    - master
    - dev

addons: &linux_addons
  apt:
    sources: &linux_sources
      - ubuntu-toolchain-r-test
      - llvm-toolchain-precise-3.5
      - llvm-toolchain-precise-3.6
      - llvm-toolchain-precise-3.7
      - llvm-toolchain-precise-3.8
      - llvm-toolchain-precise

env:
  global:
    - USE_CCACHE=1
    - CCACHE_COMPRESS=1
    - CCACHE_MAXSIZE=500M
    - CCACHE_CPP2=1

cache:
  apt: true
  ccache: true
  directories:
    - $HOME/.ccache
    - $HOME/openexr
    - $HOME/osd
    - $HOME/oiio
    - $HOME/ptex
    - $HOME/tbb

matrix:
  # Mark failure as soon as one single entry does
  fast_finish: true

  exclude:
    # Note: Workaround travis-ci/travis-ci#4681
    - os: osx
    - os: linux

  include:
    # OS X first as it takes longer
    - os: osx
      osx_image: xcode6.4
      compiler: clang
      env: COMPILER=clang++ CCOMPILER=clang

    - os: osx
      osx_image: xcode7.3
      compiler: clang
      env: COMPILER=clang++ CCOMPILER=clang

    - os: osx
      osx_image: xcode8
      compiler: clang
      env: COMPILER=clang++ CCOMPILER=clang

    - os: osx
      osx_image: xcode8.2
      compiler: clang
      env: COMPILER=clang++ CCOMPILER=clang

    ### Linux - gcc
    - os: linux
      dist: trusty
      compiler: gcc-4.8
      env: COMPILER=g++-4.8 CCOMPILER=gcc-4.8

    - os: linux
      dist: trusty
      addons:
        apt:
          sources: *linux_sources
          packages: g++-4.9
      compiler: gcc-4.9
      env: COMPILER=g++-4.9 CCOMPILER=gcc-4.9

    - os: linux
      dist: trusty
      addons:
        apt:
          sources: *linux_sources
          packages: g++-5
      compiler: gcc-5
      env: COMPILER=g++-5 CCOMPILER=gcc-5

    - os: linux
      dist: trusty
      addons:
        apt:
          sources: *linux_sources
          packages: g++-6
      compiler: gcc-6
      env: COMPILER=g++-6 CCOMPILER=gcc-6

    ### Linux - clang
    - os: linux
      dist: trusty
      compiler: clang-3.5
      # FIXME: $PATH error using clang++ with USD CMake and ccache
      env: COMPILER=/usr/local/clang-3.5.0/bin/clang++ CCOMPILER=/usr/local/clang-3.5.0/bin/clang

    - os: linux
      dist: trusty
      addons:
        apt:
          sources: *linux_sources
          packages: ['clang-3.6', 'libstdc++-5-dev']
      compiler: clang-3.6
      env: COMPILER=clang++-3.6 CCOMPILER=clang-3.6

    - os: linux
      dist: trusty
      addons:
        apt:
          sources: *linux_sources
          packages: ['clang-3.7', 'libstdc++-5-dev']
      compiler: clang-3.7
      env: COMPILER=clang++-3.7 CCOMPILER=clang-3.7

    - os: linux
      dist: trusty
      addons:
        apt:
          sources: *linux_sources
          packages: ['clang-3.8', 'libstdc++-6-dev']
      compiler: clang-3.8
      env: COMPILER=clang++-3.8 CCOMPILER=clang-3.8

before_install:
- |
  $COMPILER -v
  cmake --version
  export CXX="ccache $COMPILER"
  export CC="ccache $CCOMPILER"

  # Return number of minutes left until 41 minutes has elapsed (nothing if
  # it has elapsed or minutes remaining until then is less than argument one)
  function UsdTimeRemaing {
    local REMAIN=$(expr 41 - $SECONDS / 60)
    if [[ $REMAIN -gt 0 && ( -z "$1" || $REMAIN -gt $1 ) ]]; then
      echo $REMAIN
    fi
  }

  # Download and unarchive a tar, gzipped file into a temporary directory
  # and return that directory's path
  function UsdExtractUrlGZ {
    local DSTDIR=`mktemp -d 2>/dev/null || mktemp -d -t 'tmpdir'`
    wget -qO- "$1" | tar -xz --strip-components=1 -C $DSTDIR
    echo $DSTDIR
  }

  # Move the lib & include from directory 1 into directory 2
  function UsdMvLibAndInclude {
    mv "$1/lib" "$2/"
    mv "$1/include" "$2/"
  }

  function UsdMakeBuild {
    pushd "$(UsdExtractUrlGZ $1)"
    shift; local PREFIX=$1; shift;
    ./configure --prefix=$PREFIX "$@"
    make -j4 install
    popd
  }

  function UsdCmakeBuild {
    pushd "$(UsdExtractUrlGZ $1)"
    shift; local PREFIX=$1; shift;
    mkdir build && cd build
    cmake $CMAKE_FLAGS -DCMAKE_INSTALL_PREFIX=$PREFIX "$@" ..
    make -j4 install
    popd
  }

install:
- |
  ### USD dependencies

  ### Intel TBB v4.3 update 1
  USD_TBB=tbb43_20141023oss

  if [ $TRAVIS_OS_NAME == 'linux' ]; then
    ### Intel TBB 4.4 Update 5 (clang & c++11 needs libc++ until this release)
    if [[ $COMPILER == *clang* ]]; then
      USD_TBB=tbb2017_20160722oss
      TBB_URL=https://www.threadingbuildingblocks.org/sites/default/files/software_releases/linux/${USD_TBB}_lin_0.tgz
      CMAKE_FLAGS="-DCMAKE_CXX_FLAGS=-DTBB_USE_GLIBCXX_VERSION=40800"
    else
      TBB_URL=https://www.threadingbuildingblocks.org/sites/default/files/software_releases/linux/${USD_TBB}_lin.tgz
    fi

    sudo apt-get -qq update

    ### boost v1.55
    # We install only the packages we need for faster turnaround
    sudo apt-get install libboost-iostreams1.55.0 libboost-iostreams1.55-dev \
           libboost-python1.55.0 libboost-python1.55-dev libboost-regex1.55.0 \
           libboost-regex1.55-dev libboost-system1.55.0 libboost-system1.55-dev \
           libboost-program-options1.55.0 libboost-program-options1.55-dev \
           libboost-filesystem1.55.0 libboost-filesystem1.55-dev \
           libboost-thread1.55.0 libboost-thread1.55-dev
    ### double-conversion
    # USD docs currently claim we require 1.1.1, but apt-get gives us 2.0.1 on trusty.
    # Building 1.1.1 as a shared library is annoying, so we'll go with this for now.
    sudo apt-get install libdouble-conversion-dev

    ### For OpenSubdiv 3.0.5
    sudo apt-get install libxrandr-dev libxcursor-dev libxinerama-dev libglfw-dev

    ### For USDIMAGING
    sudo apt-get install libglew-dev python-pyside pyside-tools

  elif [ $TRAVIS_OS_NAME == 'osx' ] ; then
    # This is where timeout is hiding
    PATH="$PATH:/usr/local/opt/coreutils/libexec/gnubin"
    TBB_URL=https://www.threadingbuildingblocks.org/sites/default/files/software_releases/mac/${USD_TBB}_osx.tgz

    brew update >/dev/null
    brew install ccache coreutils python
    brew install glew double-conversion boost-python

    PYTHON_INCLUDE_DIR=`python -c "from distutils import sysconfig; print sysconfig.get_python_inc()"`
    PYTHON_LIBRARY=`find $(dirname $(dirname $PYTHON_INCLUDE_DIR)) -name "libpython*.dylib" -print -quit`
    CMAKE_FLAGS="-DPYTHON_LIBRARY=$PYTHON_LIBRARY -DPYTHON_INCLUDE_DIR=$PYTHON_INCLUDE_DIR"

    ### Headless install doesn't work & with 10.11 can't write to /usr/bin
    # sudo installer -pkg <path-to-packge> -target /

    function UsdInstallPackages {
      local LDIR="$1"; shift
      pushd "$LDIR"
      for f in "$@"; do
        gzip -cd "$f" | pax -r
      done
      sudo rsync -a ./Library/* /Library/
      sudo rsync -a ./usr/* /usr/local/
      popd
      # rm -rf "$LDIR"/*
    }

    ### QT
    wget http://qt.mirror.constant.com/archive/qt/4.8/4.8.6/qt-opensource-mac-4.8.6-1.dmg -O /tmp/QtMac.dmg
    hdiutil attach /tmp/QtMac.dmg
    mkdir /tmp/QtMac
    QT_PKGS="/Volumes/Qt 4.8.6/packages/Qt_"
    QT_ARK=".pkg/Contents/Archive.pax.gz"
    UsdInstallPackages /tmp/QtMac "${QT_PKGS}libraries${QT_ARK}" "${QT_PKGS}headers${QT_ARK}" "${QT_PKGS}tools${QT_ARK}"

    ### PySide
    wget http://pyside.markus-ullmann.de/pyside-1.2.1-qt4.8.5-py27apple-developer-signed.pkg -O /tmp/PySide.pkg
    pkgutil --expand /tmp/PySide.pkg /tmp/PySide
    UsdInstallPackages /tmp/PySide Payload
  fi

- |
  ### Python Dependencies
  pip install jinja2 PyOpenGL
  ### Travis python bin is at /opt/python2.7, but apt installs to  /usr/lib/python2.7
  if [ $TRAVIS_OS_NAME == 'linux' ]; then
    export PYTHONPATH="$PYTHONPATH:/usr/lib/python2.7/dist-packages"
  fi

- |
  ### Intel TBB
  if [ ! -d "$HOME/tbb/lib" ]; then
    UsdMvLibAndInclude "$(UsdExtractUrlGZ "$TBB_URL")" "$HOME/tbb"
  else
    echo 'Using cached TBB';
  fi

- |
  ### ilmbase and OpenEXR 2.2.0
  if [ $(UsdTimeRemaing 5) ] && [ ! -d "$HOME/openexr/lib" ]; then
    UsdMakeBuild http://download.savannah.nongnu.org/releases/openexr/ilmbase-2.2.0.tar.gz $HOME/openexr
    UsdMakeBuild http://download.savannah.nongnu.org/releases/openexr/openexr-2.2.0.tar.gz $HOME/openexr --with-pkg-config=no LDFLAGS="-Wl,-rpath -Wl,$HOME/openexr/lib"
  else
    echo 'Using cached OpenEXR'
  fi

- |
  ### OpenSubdiv 3.0.5
  if [ $(UsdTimeRemaing 5) ] && [ ! -d "$HOME/osd/lib" ]; then
    UsdCmakeBuild https://github.com/PixarAnimationStudios/OpenSubdiv/archive/v3_0_5.tar.gz $HOME/osd -DNO_EXAMPLES=1 -DNO_TUTORIALS=1 -DNO_REGRESSION=1 -DNO_MAYA=1 -DNO_PTEX=1 -DNO_DOC=1 -DNO_OMP=1 -DNO_TBB=1 -DNO_CUDA=1 -DNO_OPENCL=1 -DNO_CLEW=1 ..
  else
    echo 'Using cached OpenSubdiv'
  fi

- |
  ### OpenImageIO 1.5.11
  if [ $(UsdTimeRemaing 10) ] && [ ! -d "$HOME/oiio/lib" ]; then
    UsdCmakeBuild https://github.com/OpenImageIO/oiio/archive/Release-1.5.11.tar.gz $HOME/oiio -DILMBASE_HOME=$HOME/openexr -DOPENEXR_HOME=$HOME/openexr -DSTOP_ON_WARNING=OFF ..
  else
    echo 'Using cached OpenImageIO'
  fi

- |
  ### Ptex 2.0.30
  if [ $(UsdTimeRemaing 5) ] && [ ! -d "$HOME/ptex/lib" ]; then
    pushd "$(UsdExtractUrlGZ https://github.com/wdas/ptex/archive/v2.0.30.tar.gz)/src"
    make -j4
    UsdMvLibAndInclude "../install/" "$HOME/ptex"
    popd
  else
    echo 'Using cached Ptex'
  fi

script:
- |
  ### Build & Test USD
  USD_TIMEOUT=`UsdTimeRemaing 5`
  if [ $(UsdTimeRemaing 5) ]; then
    mkdir build && cd build
    echo "cmake $CMAKE_FLAGS -DTBB_ROOT_DIR=$HOME/tbb -DOPENEXR_LOCATION=$HOME/openexr -DOIIO_LOCATION=$HOME/oiio -DOPENSUBDIV_ROOT_DIR=$HOME/osd -DPTEX_LOCATION=$HOME/ptex -DPXR_VALIDATE_GENERATED_CODE=OFF .."
    cmake $CMAKE_FLAGS -DTBB_ROOT_DIR=$HOME/tbb -DOPENEXR_LOCATION=$HOME/openexr -DOIIO_LOCATION=$HOME/oiio -DOPENSUBDIV_ROOT_DIR=$HOME/osd -DPTEX_LOCATION=$HOME/ptex -DPXR_VALIDATE_GENERATED_CODE=OFF ..

    # Timeout after we've run for USD_TIMEOUT min so there is time to upload caches
    echo "Building with -j4, for ${USD_TIMEOUT} minutes"

    timeout -s SIGTERM "${USD_TIMEOUT}m" make -j4

    local RESULT=$?
    if [ $RESULT -eq 0 ]; then
      if [ $(UsdTimeRemaing 5) ]; then
        # Default install location is /usr/local; we need sudo access to write there.
        sudo make install

        ### These tests fail intermitently
        local SKIP_TESTS="testArchTiming"
        if [ $TRAVIS_OS_NAME == 'osx' ] ; then
          export DYLD_LIBRARY_PATH="$HOME/tbb/lib" #:$HOME/oiio/lib:$HOME/openexr/lib:$HOME/osd/lib:$HOME/ptex/lib
          ### FIXME: This test is always failing!
          SKIP_TESTS="$SKIP_TESTS|TfDebugTestEnvList"
        fi

        echo "Skipping tests: ${SKIP_TESTS}"
        ctest --output-on-failure -E ${SKIP_TESTS}
        return $?
      fi
    elif [ $RESULT -ne 124 ]; then
      return $RESULT
    fi
  fi

  # Signal timeout icon (!) for Travis
  TRAVIS_TEST_RESULT=124
  return $TRAVIS_TEST_RESULT

